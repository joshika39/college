@startuml Library (id=LIBRARY) 

interface IBookSource {
	+ Books: IEnumerable<ILibraryBook>
	+ StoreNewBook(book: ILibraryBook): void
	+ GiveAway(book: ILibraryBook): void
	+ SearchInBooks(query: string): ILibraryBook
}

class OnlineBooks implements IBookSource{
	+ Books: IEnumerable<ILibraryBook>
	+ StoreNewBook(book: ILibraryBook): void
	+ GiveAway(book: ILibraryBook): void
	+ SearchInBooks(query: string): ILibraryBook
}

class PhisycalBooks implements IBookSource{
	+ Books: IEnumerable<ILibraryBook>
	+ StoreNewBook(book: ILibraryBook): void
	+ GiveAway(book: ILibraryBook): void
	+ SearchInBooks(query: string): ILibraryBook
}

!startsub Rec
interface ILibrary{
	+ Id: Guid
	+ AllBooks: IEnumerable<ILibraryBook>
    + AvailableBooks: IImmutableList<ILibraryBook>
    + Login(username: string): IMember
	+ GetNewBook(book: IBook, category: string): void
	+ LendBook(book: IBook, date: DateTime, memberId: Guid): bool
	+ ReturnBook(book: ILibraryBook, date: DateTime, memberId: Guid): bool
	+ Register(name: string, username: string, bornAt: DateTime): void
	+ LoadBooks(path: string): void
    + LoadMembers(path: string): void
}

interface IMember{
	+ Name: string
	+ UserName: string
	+ BornAt: Date
	+ Balance: double
	+ PendingBills: IList<IBill>
	+ BorrowedBooks: IEnumerable<ILibraryBook>
	+ Borrow(book: ILibraryBook): void
	+ Return(book: ILibraryBook): void
	+ Pay(): void
	+ Pay(amount: double): void
	+ Pay(bill: IBill, amount: double): void
}

class LibraryClass{
	- _borrowedBooks: IList<ILibraryBook>
	- _bookFactory: IBookFactory
	- _members: IList<IMember>
	+ Id: Guid
	+ AllBooks: IEnumerable<ILibraryBook>
    + AvailableBooks: IImmutableList<ILibraryBook>
    + Login(username: string): IMember
	+ GetNewBook(book: IBook, category: string): void
	+ LendBook(book: IBook, date: DateTime, memberId: Guid): bool
	+ ReturnBook(book: ILibraryBook, date: DateTime, memberId: Guid): bool
	+ Register(name: string, username: string, bornAt: DateTime): void
	+ LoadBooks(path: string): void
    + LoadMembers(path: string): void
	+ <<constructor>> LibraryClass(bookFactory: IBookFactory, reader: IReader)
	- GetNewBook(book: ILibraryBook): void
	- SearchBook(isbn: string, target: IEnumerable<ILibraryBook>, result: *ILibraryBook): bool
	- SearchUser(Guid memberId, member: *IMember): bool
	- MemberTryParse(line: string, member: *IMember): bool

}

class Member{
	- _lib: ILibrary
	- _borrowedBooks: IList<ILibraryBook>
	- _id: Guid
	+ Name: string
	+ UserName: string
	+ BornAt: Date
	+ Balance: double
	+ PendingBills: IList<IBill>
	+ BorrowedBooks: IEnumerable<ILibraryBook>
	+ Borrow(book: ILibraryBook): void
	+ Return(book: ILibraryBook): void
	+ Pay(): void
	+ Pay(amount: double): void
	+ Pay(bill: IBill, amount: double): void
	+ <<constructor>> Member(name: string, userName: string, bornAt: DateTime, lib: ILibrary)
}

class MemberDTO {
	+ Member: IMember
	+ Id: Guid
}

ILibrary <|.. LibraryClass
ILibrary -- IMember : Registers >
LibraryClass "0..1" *-- "*" MemberDTO
IMember <|.. Member
MemberDTO *-- IMember

!endsub

@enduml